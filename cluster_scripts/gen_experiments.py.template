#!/usr/bin/env python3
"""Script for generating experiment.txt"""
import itertools
import os

# define some paths
USER, PROJECTS_DIR, PROJECT_NAME = (
    os.environ["USER"],
    "projects",
    "aht-with-preferences",
)
PROJECT_HOME = os.path.join(os.path.expanduser("~"), PROJECTS_DIR, PROJECT_NAME)
EXPERIMENT_NAME = "cluster_test"


def run_name(combo, keys):
    """Create a name for the run based on the parameter values"""
    combo_strings = "-".join(
        [
            f"{key.replace('.', '_')}_{value.lower() if isinstance(value, str) else value}"
            for key, value in zip(keys, combo)
        ]
    )
    return combo_strings.rstrip("-")


# this is the base command that will be used for the experiment
base_call = f"ahtpython {PROJECT_HOME}/scripts/train.py --project-dir=$AHT_PROJECT_PATH"

# define a dictionary of variables to perform a grid search over.
# the key for each variable should match the name of the command-line
# argument required by the script in base_call
variables = {
    "env": ["lbf"],
    "algo": ["oracle"],
    "seed": list(range(5)),  # 5 seeds
}

combinations = list(itertools.product(*variables.values()))
print(f"Total experiments = {len(combinations)}")

output_file = open(
    f"{PROJECT_HOME}/cluster_scripts/experiments/{EXPERIMENT_NAME}/experiment.txt",
    "w+",
)

for c in combinations:
    expt_call = base_call
    for i, var in enumerate(variables.keys()):
        expt_call += f" --{var}={c[i]}"
    print(expt_call, file=output_file)

output_file.close()
